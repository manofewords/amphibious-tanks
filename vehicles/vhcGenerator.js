/**
 * GENERATES A FLEET WITH RANDOM VEHICLES
 *
 * DO NOT EDIT THIS FILE
 */
const uuid = require('uuid/v4')
const pubsub = require('pubsub-js')
const {
  randomPos,
  randomBearing,
  nextPosition,
} = require('./positions')
const {
  randomStatus,
  randomOccupancy,
} = require('./status')

const MAX_SPEED = 60/3.6     // m/s
const SF = [-122.447177, 37.755705]
const TIME_INTERVAL = 1000 // ms


// generates a new vehicle at a random place, somewhere around lngLat
const newVhc = (name, lngLat) => ({
  name,
  id: uuid(),
  status: { id: 0, msg: '' },
  position: randomPos(lngLat),
  bearing: randomBearing(),
  speed: MAX_SPEED,
  occupancy: 0,
  max_occupancy: Math.ceil(Math.random() * 7),
})

const fleet = (nbVhc) => {

  // generates multiple vehicles at random position around SF
  let vehicles = Array.from(Array(nbVhc), (_, i) => newVhc('VHC-' + i, SF))

  const getVehiclesStatus = () =>
    vehicles = vehicles.map(v => {
      const nextStatus = Math.random() > 0.1 ? v.status : randomStatus()

      if (nextStatus.id <= 1) { // vehicle isn't running (inactive or idle)
        return Object.assign({}, v, {
          status: nextStatus,
          speed: 0,
          occupancy: 0
        })
      }

      const distanceCoveredKm = TIME_INTERVAL * v.speed / 1000000 //> ms * m/s / 1000000 = km
      return Object.assign({}, v, {
        status: nextStatus,
        position: nextPosition(v.position, v.bearing, distanceCoveredKm),
        bearing:  Math.random() < 0.4 ? randomBearing(v.bearing) : v.bearing,
        speed: MAX_SPEED,
        occupancy: randomOccupancy(v.status, nextStatus, v.max_occupancy, v.occupancy),
      })
    })


  const start = (nbVehicles) =>
    setInterval(
      () => pubsub.publish('vehicles-status', getVehiclesStatus()),
      TIME_INTERVAL
    )

  return start
}

module.exports = fleet
